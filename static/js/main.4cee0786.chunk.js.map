{"version":3,"sources":["components/Users/styles/users.module.scss","reducers/reducer.js","actions/actionTypes.js","components/Users/Users.js","containers/UsersContainer.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","users","reducer","state","action","type","Users","props","handleChangeName","event","setState","name","target","value","handleChangeLastname","lastname","handleChangeAge","age","handleChangeM","checked","male","handleChangeF","female","this","getUsers","console","log","id","s","placeholder","onChange","arr","filterUsers","filter","user","includes","sex","map","filterUser","showUsers","React","Component","mapDispatchToProps","dispatch","a","fetch","response","json","responseBody","UsersContainer","connect","App","className","Boolean","window","location","hostname","match","configureStore","createStore","applyMiddleware","thunk","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cee0786.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"users_users__2S9Ld\"};","import * as type from '../actions/actionTypes';\n\nexport const initialState = {\n  users: false,\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case type.ADD_USERS:\n      return { ...state, users: action.users };\n    default:\n      return state;\n  }\n};\n","export const ADD_USERS = 'ADD_USERS';\nexport const a = 'a';\n","import React from 'react';\n\n// styles\nimport s from './styles/users.module.scss';\n\nexport class Users extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      lastname: '',\n      age: '',\n      male: false,\n      female: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getUsers();\n  }\n\n  handleChangeName = event => {\n    this.setState({ name: event.target.value });\n  }\n\n  handleChangeLastname = event => {\n    this.setState({ lastname: event.target.value });\n  }\n\n  handleChangeAge = event => {\n    this.setState({ age: event.target.value });\n  }\n\n  handleChangeM = event => {\n    if (!event.target.checked) {\n      this.setState({ male: event.target.checked });\n    } else this.setState({ male: event.target.checked });\n  }\n\n  handleChangeF = event => {\n    if (!event.target.checked) {\n      this.setState({ female: event.target.checked });\n    } else this.setState({ female: event.target.checked });\n  }\n\n  render() {\n    const { users } = this.props;\n    console.log(users);\n    const showUsers = (name, lastname, age, male, female, arr) => {\n      let filterUsers = arr;\n      if (name !== '' && arr) {\n        filterUsers = filterUsers.filter(user => user.name.includes(name));\n      } \n      if (lastname !== '' && arr) {\n          filterUsers = filterUsers.filter(user => user.lastname.includes(lastname));\n      }\n      if (age !== '' && arr) {\n        filterUsers = filterUsers.filter(user => user.age == age);\n      }\n      if (male && arr) {\n        filterUsers = filterUsers.filter(user => user.sex === 'm');\n      }\n      if (female && arr) {\n        filterUsers = filterUsers.filter(user => user.sex === 'f');\n      }\n      if (male && female && arr) {\n        filterUsers = filterUsers.filter(user => user.sex === 'f' && user.sex === 'm');\n      }\n      return (filterUsers ? filterUsers.map(filterUser => (\n            <>\n              <div>{filterUser.name}</div>\n              <div>{filterUser.lastname}</div>\n              <div>{filterUser.age}</div>\n              <div>{filterUser.sex}</div>\n            </>\n          )) : null\n      );\n  }\n    return (\n      <div id={s.users}>\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"name\"\n            onChange={this.handleChangeName}\n            value={this.state.name}\n          />\n        </div>\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"lastname\"\n            onChange={this.handleChangeLastname}\n            value={this.state.lastname}\n          />\n        </div>\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"age\"\n            onChange={this.handleChangeAge}\n            value={this.state.age}\n          />\n        </div>\n        <div>\n          <label>\n            male\n            <input type=\"checkbox\" onChange={this.handleChangeM} />\n          </label>\n          <label>\n            female\n            <input type=\"checkbox\" onChange={this.handleChangeF} />\n          </label>\n        </div>\n        {showUsers(\n          this.state.name,\n          this.state.lastname,\n          this.state.age,\n          this.state.male,\n          this.state.female,\n          users,\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Users;\n","import { connect } from 'react-redux';\nimport { Users } from '../components/Users/Users';\nimport { getUsers } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  users: state.users,\n});\nconst mapDispatchToProps = {\n  getUsers,\n};\nexport const UsersContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Users);\n\nexport default UsersContainer;\n","import * as type from './actionTypes';\n\nexport const addUsers = users => ({\n  type: type.ADD_USERS,\n  users,\n});\n\nconst url = 'https://venbest-test.herokuapp.com/';\n\nexport const getUsers = () => async dispatch => {\n  try {\n    const response = await fetch(url);\n    const responseBody = await response.json();\n    dispatch(addUsers(responseBody));\n  } catch (e) {\n    console.log(e);\n  }\n};\n","import React from 'react';\nimport { UsersContainer } from './containers/UsersContainer';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"app-wrapper\">\n      <div className=\"app-inner\">\n        <div className=\"content\">\n          <UsersContainer />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer, initialState } from './reducers/reducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nexport function configureStore() {\n  const store = createStore(reducer, initialState, applyMiddleware(thunk));\n  return store;\n}\nexport const store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}